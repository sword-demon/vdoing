(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{570:function(t,s,e){"use strict";e.r(s);var o=e(16),c=Object(o.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"泛型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[t._v("#")]),t._v(" 泛型")]),t._v(" "),e("blockquote",[e("p",[t._v("泛型就相当于标签")])]),t._v(" "),e("p",[t._v("形式："),e("code",[t._v("<>")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("p",[t._v("集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存什么类型的对象，所以在 JDK1.5 之前只能把元素类型设计为"),e("code",[t._v("Object")]),t._v("，JDK1.5 之后使用泛型来解决。因为这个时候除了元素类型不确定，其他的部分是确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做"),e("strong",[t._v("泛型")])]),t._v(" "),e("p",[e("code",[t._v("Collection<E>，List<E>，ArrayList<E>")]),t._v("这个"),e("code",[t._v("<E>")]),t._v("就是类型参数，即泛型。")])])])}),[],!1,null,null,null);s.default=c.exports}}]);